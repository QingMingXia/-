package com.example.demo;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

/**
 * 〈一句话功能简述〉<br>
 * 〈功能详细描述〉
 *
 * @author  on 2018/07/03
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */

public class RmiClient {
    public static void main(String[] args) {
        try {
            RMISevice rmiSevice = (RMISevice)Naming.lookup("//10.24.61.128:8888/rm");
            rmiSevice.say();
        } catch (RemoteException e) {
            e.printStackTrace();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (NotBoundException e) {
            e.printStackTrace();
        }

    }
}







package com.example.demo;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

/**
 * 〈一句话功能简述〉<br>
 * 〈功能详细描述〉
 *
 * @author  on 2018/07/03
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */

public class RMIServer {
    public static void main(String[] args) throws RemoteException, MalformedURLException {

            Object obj = new Object();
            RMIServiceImpl rmiSevice = new RMIServiceImpl();
            Registry registry = LocateRegistry.createRegistry(8888);
        Naming.rebind("rmi://localhost:8888/rm",rmiSevice);
            //registry.rebind("rm",rmiSevice);
        try {
            synchronized (obj){
                obj.wait();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }
}



package com.example.demo;

import org.apache.ibatis.session.SqlSession;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

/**
 * 〈一句话功能简述〉<br>
 * 〈功能详细描述〉
 *
 * @author  on 2018/07/03
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */

public class RMIServiceImpl extends UnicastRemoteObject implements RMISevice {
    public RMIServiceImpl() throws RemoteException {
        super();
    }

    @Override
    public String say() {
        System.out.println("hello world!");
        return "hello";
    }

    @Override
    public UserInfo getUserInfo(String id) {
        SqlSession session = DbUtil.getSession();
        UserMapper mapper = session.getMapper(UserMapper.class);
        UserInfo userInfo2 = session.selectOne("getUserById", id);
        return userInfo2;
    }
}


public interface RMISevice extends Remote{
    String say() throws RemoteException; // 这个异常必须抛出来
    UserInfo getUserInfo(String id) throws RemoteException;
}


package com.example.demo;

/**
 * 〈一句话功能简述〉<br>
 * 〈功能详细描述〉
 *
 * @author on 2018/06/19
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

public class DbUtil {
    private static SqlSessionFactory sessionFactory;
    static{
        InputStream  in= null;
        try {
            in=Resources.getResourceAsStream("SqlMapConfig.xml");
            sessionFactory=new SqlSessionFactoryBuilder().build(in);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }finally {
            if(in != null){
                try {
                    in.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }
    public static SqlSession getSession(){
        return sessionFactory.openSession();
    }
}


package com.example.demo;

/**
 * Created by 17081485 on 2018/6/19.
 */

public interface UserMapper {
    UserInfo getUserById(String userId);
}


package com.example.demo;

import java.io.Serializable;

/**
 * 〈一句话功能简述〉<br>
 * 〈功能详细描述〉
 *
 * @author  on 2018/06/19
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */


public class UserInfo implements Serializable {
    private static final long serialVersionUID = 42666666666666L;
    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUserPwd() {
        return userPwd;
    }

    public void setUserPwd(String userPwd) {
        StackTraceElement stack[] = Thread.currentThread().getStackTrace();
        for(int i=0;i<stack.length;i++){
            System.out.println(stack[i].getClassName()+":"+stack[i].getLineNumber()+"  "+stack[i].getMethodName()+"-----");
        }
        this.userPwd = userPwd;
    }

    public Integer getUserType() {
        return userType;
    }

    public void setUserType(Integer userType) {
        this.userType = userType;
    }

    private String userName;
    private String userId;
    private String userPwd;
    private Integer userType;

    @Override
    public String toString() {
        return "UserInfo{" + "userName='" + userName + '\'' + ", userId=" + userId + '}';
    }


}



datasource.properties配置信息
jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/sys?useUnicode=true&characterEncoding=UTF-8
jdbc.username=root
jdbc.password=root

oneMapper.xml配置

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.UserMapper">
    <resultMap id="userMap" type="User" >
        <id property="userId" column="user_id" javaType="java.lang.String"></id>
        <result property="userName" column="user_name" javaType="java.lang.String"/>
        <result property="userPwd" column="user_pwd" javaType="java.lang.String"/>
        <result property="userType" column="user_type" javaType="java.lang.Integer"/>
    </resultMap>
    <resultMap type="User" id="userAndCourse">
        <id property="userId" column="user_id" javaType="int"></id>
        <result property="userName" column="user_name" javaType="java.lang.String"/>
        <result property="userPwd" column="user_pwd" javaType="java.lang.String"/>
        <result property="userType" column="user_type" javaType="int"/>
        <collection property="courses" column="user_id" select="findByCourse"></collection>
    </resultMap>

    <insert id="addUser" parameterType="User" keyProperty="user.userId" useGeneratedKeys="true">
        insert into users values(null,#{user.userName},#{user.userPwd},#{user.userType})
    </insert>
    <!-- 得到刚才插入数据库自增长的主键值 -->
    <delete id="delById" parameterType="Integer">
        delete from users where user_id=#{id}
    </delete>
    <update id="updateUserById"  parameterType="String">
        <!-- id为1的数据的名字改为用户需要的 -->
        update users set user_name=#{name} where user_id=1
    </update>

    <select id="getUserById" parameterType="String" resultMap="userMap" >
        select * from users where user_id=#{id}
    </select>
    <select id="getAllUser"  resultMap="userMap" >
        select * from users
    </select>
    <!--many to many-->
    <select id="findUserAndCourse" parameterType="int" resultMap="userAndCourse">
        select * from users where user_id=#{id}
    </select>
    <!--<select id="findByCourse" parameterType="int" resultMap="com.wode.mapper.CourseMapper.courseMap">
        select * from course where course_id in (select course_id from users_course where user_id=#{id})
    </select>-->
</mapper>



sqlConfig.xml配置

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <properties resource="datasource.properties"></properties>
    <settings>
        <setting name="cacheEnabled" value="true" />
    </settings>
    <typeAliases>
        <typeAlias type="com.example.demo.UserInfo" alias="User"/>
    </typeAliases>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}" />
                <property name="url" value="${jdbc.url}" />
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
            </dataSource>
        </environment>
    </environments>





    <mappers>
        <mapper resource="oneMap.xml" />
    </mappers>

</configuration>











