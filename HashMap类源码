public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>,Cloneable,Serializable{
  static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; //默认的初始化容量大小，必须是2的次方
  static final int MAXIMUM_CAPACITY = 1 << 30; //最大的容量大小
  static final float DEFAULT_LOAD_FACTOR = 0.75f //默认的加载因子，当hashmap容量满设置总容量的3/4，执行再hash


 static class Node<K,V> implements Map.Entry<K,V> ｛
        final int hash;
        final K key;
        V value;
        Node<K,V> next;
 
 
 ｝
 
 public V put(K key, V value) {
        return putVal(hash(key), key, value, false, true);
    }
    
    transient Node<K,V>[] table;
    
  final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node<K,V>[] tab; Node<K,V> p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node<K,V> e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
                e = p;
            else if (p instanceof TreeNode)
                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size > threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    }
 
 
 
 
 
 
 
 














}
